{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","React","useState","highlighted","setHighlighted","contacts","setContacts","newduplicateArray","textAreaRef","useRef","toastNotificationRef","copySuccess","setCopySuccess","createMarkUp","map","contact","SSO","length","Description","Name","phoneNumber","url","toastNotification","onClick","setTimeout","console","log","className","type","id","ref","title","width","height","viewBox","d","onDragEnter","onDragLeave","onDragOver","e","preventDefault","onDrop","Array","from","dataTransfer","files","filter","file","forEach","a","text","result","parse","header","existing","data","icon","faArrowDown","size","onChange","phoneno","i","match","concat","validatePhoneNumber","includes","checkUrl","placeholder","value","join","current","select","document","execCommand","target","focus","Boolean","window","location","hostname","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a0191b9.chunk.js","sourcesContent":["// Quantum Health December, 2020\n// Sean Malone Front-end Developer\n// contact: sean.malone@quantum-health.com\n\nimport React, { useRef } from 'react';\nimport { parse } from \"papaparse\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faArrowDown } from '@fortawesome/free-solid-svg-icons'\nimport './toast.css'\n\n\nexport default function App() {\n  const [highlighted, setHighlighted] = React.useState(false);\n  let [contacts, setContacts] = React.useState([]);\n  let newduplicateArray = contacts;\n  const textAreaRef = useRef(null);\n  const toastNotificationRef = useRef(null);\n  const [copySuccess, setCopySuccess] = React.useState(false)\n\n\n//toast closed and setting copy status to false\n  function toastClose(){\n    setTimeout(function(){setCopySuccess(false)}, 1000)\n    console.log(copySuccess)\n  }\n\n//copy code button functionality\n  function copyText(e) {\n    setCopySuccess(true)\n    textAreaRef.current.select()\n    document.execCommand('copy')\n    e.target.focus();\n    setTimeout(function(){setCopySuccess(false)}, 4000)\n  }\n\n\n//Clear text area \n  function clearText(e){\n    e.preventDefault();\n    textAreaRef.current.value ='';\n    setContacts((existing) => []);\n  };\n\n\n//checks url for appropriate formatting\n  function checkUrl() {\n    for (let i = 0; i < newduplicateArray.length; ++i) {\n      let contact = newduplicateArray[i];\n//if not lead in formatting at all it will be added and returned\n      if (!contact.url.includes(\"https://\") && !contact.url.includes(\"http://\") &&  !contact.url.includes(\"www.\")) {\n        var hypertextTransferWorldWideWeb = \"http://www.\"\n        contact.url = hypertextTransferWorldWideWeb.concat(contact.url)\n//if only contains www. lead in remaining \"https://\" will be added\n      } else if (!contact.url.includes(\"https://\") && !contact.url.includes(\"http://\")&& contact.url.includes(\"www.\")) {\n        var hypertextTransfer = \"http://\"\n        contact.url = hypertextTransfer.concat(contact.url)\n      }\n    }\n  };\n\n//Validate Phone Numbers\n  function validatePhoneNumber(){\n\n    var phoneno =/^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/;\n        for (let i = 0; i < newduplicateArray.length; ++i){\n      let contact = newduplicateArray[i];\n\n     if(!contact.phoneNumber.match(phoneno) && contact.phoneNumber.length > 1){\n        let errorMessage = \"CHECK THIS PHONE NUMBER-->\"\n        contact.phoneNumber = errorMessage.concat(contact.phoneNumber)\n        console.log(contact.phoneNumber);\n      }\n  }\n}\n\n//final markup string created conditionally based on what information was provided.\n  let createMarkUp = newduplicateArray.map((contact) => {\n//if there is an SSO item it will print out the script \n    if (contact.SSO.length != \"\") {\n      return `\n      <p>${contact.Description}<br>\n        <a \n        class=\"link__external\" \n        href=\"{$SiteDomain}${contact.SSO}\" \n        target=\"_blank\" sso-link>${contact.Name}\n        </a>\n      </p>`\n    } else if (contact.phoneNumber.length <= 0) {\n//if there is no telephone number\n      return `\n      <p>${contact.Description}<br>\n            <a \n              class=\"link__external\" \n              href=\"${contact.url}\" \n              target=\"_blank\">${contact.Name}\n            </a>\n      </p>`\n    } else if (contact.phoneNumber) {\n//if there is a telephone number\n      return `\n      <p>${contact.Description}<br>\n            <a \n              class=\"link__external\" \n              href=\"${contact.url}\" \n              target=\"_blank\">${contact.Name}\n            </a>\n               &ensp;\n            <a href=\"tel:\">${contact.phoneNumber}\n                </a>\n      </p>`\n    }\n  }\n  );\n\nfunction ValidateArray(){\n  validatePhoneNumber()\n  checkUrl()\n  //console.log('validateArray was run')\n}\n\n\n//toast notification \n  let toastNotification = (\n    <div onClick={toastClose} className=\"alert-toast fixed bottom-0 right-0 m-8 w-5/6 md:w-full max-w-sm\" >\n      <input type=\"checkbox\" className=\"hidden\" id=\"footertoast\" ref={toastNotificationRef} />\n      <label \n      className=\"close cursor-pointer flex items-start justify-between w-full p-2 bg-green-500 h-24 rounded shadow-lg text-white\" title=\"close\" \n      >\n        Copied to Clipboard!\n      <svg className=\"fill-current text-white\" width=\"18\" height=\"18\" viewBox=\"0 0 18 18\">\n          <path d=\"M14.53 4.53l-1.06-1.06L9 7.94 4.53 3.47 3.47 4.53 7.94 9l-4.47 4.47 1.06 1.06L9 10.06l4.47 4.47 1.06-1.06L10.06 9z\"></path>\n        </svg>\n      </label>\n    </div>\n  );\n\n\n//rendered information below\n  return (\n    <div className=\"flex space-x-4n m-0 \">\n{/*Dropzone for .csv file*/}\n      <div\n        className={` flex flex-wrap content-center h-auto  p-6 w-2/12  ${highlighted ? \"border-blue-600 bg-blue-100\" : \"border-gray-600\"\n          }`}\n        onDragEnter={() => {\n          setHighlighted(true);\n        }}\n        onDragLeave={() => {\n          setHighlighted(false);\n        }}\n        onDragOver={(e) => {\n          e.preventDefault();\n        }}\n\n        onDrop={(e) => {\n          e.preventDefault();\n          setHighlighted(false);\n          Array.from(e.dataTransfer.files)\n            .filter((file) => file.type === \"text/csv\")\n            .forEach(async (file) => {\n              const text = await file.text();\n              const result = parse(text, { header: true });\n              setContacts((existing) => [...existing, ...result.data]);\n            });\n        }}\n      >\n        <div className={`text-center mx-auto text-3xl p-5 text-gray-500 ${highlighted ? \"text-gray-800\" : \"border-gray-600\"\n          }`}>\n          DROP .CSV HERE\n          <div>\n            <FontAwesomeIcon icon={faArrowDown} size=\"lg\" />\n          </div>\n        </div>\n      </div>\n\n      <div className=\"relative flex flex-col h-screen w-10/12 p-6 justify-self-center bg-gray-800\t\">\n{/*Text area where code will populate*/}\n        <textarea className=\"resize-none bg-gray-800 text-white overflow-auto h-full w-full m-0\"\n        onChange={ValidateArray()}\n          ref={textAreaRef}\n          placeholder=\"Code will appear below:\"\n          value={createMarkUp.join(\"\")}\n        >        \n        \n\n        </textarea>\n        <div className=\" relative bottom-0 mt-6\">\n{/* Copy code button */}\n\n          <button onClick={copyText}\n            className=\"text-white bg-transparent border border-solid border-white hover:bg-white hover:text-gray-800  active:bg-white font-bold uppercase px-8 py-3 rounded outline-none focus:outline-none mr-1 mb-1\"\n            type=\"button\" >\n            Copy code\n          </button>\n{/* clear content button */}\n             <button onClick={clearText}\n            className=\"text-white bg-transparent border border-solid border-white hover:bg-white hover:text-gray-800  active:bg-white font-bold uppercase px-8 py-3 rounded outline-none focus:outline-none ml-8 mb-1\"\n            type=\"button\" >\n            Clear \n          </button>\n        </div>\n        { copySuccess ? <div>{toastNotification}</div> : null}\n      </div>\n    </div>\n  );\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./assets/main.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}